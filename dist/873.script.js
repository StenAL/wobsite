(()=>{"use strict";const t=256;class e{text;color;stepSize;font;marginBottom;background;textWidth;pixelsScrolled;renderingContext;constructor({text:t="SCROLLING TEXT",font:e='"Arial", sans-serif',fontSize:s=256,color:n="green",step:r=1,marginBottom:a=0,background:o},i){this.text=t,this.color=n,this.stepSize=r,this.font=e,this.marginBottom=a,this.background=o,this.pixelsScrolled=0,this.renderingContext=i,this.renderingContext.font=s+"px "+this.font,this.textWidth=Math.ceil(this.renderingContext.measureText(this.text).width)}step(){this.background?(this.renderingContext.fillStyle=this.background,this.renderingContext.fillRect(0,0,t,t)):this.renderingContext.clearRect(0,0,t,t),this.pixelsScrolled=(this.pixelsScrolled+this.stepSize)%(this.textWidth+512),this.renderingContext.fillStyle=this.color;const e=-1*this.pixelsScrolled+t;this.renderingContext.fillText(this.text,e,t-this.marginBottom)}}var s,n;!function(t){t[t.Worker=0]="Worker",t[t.Canvas=1]="Canvas"}(s||(s={})),function(t){t[t.Stopped=0]="Stopped",t[t.Running=1]="Running"}(n||(n={}));class r{canvas;canvasDrawer;state;constructor(t){this.canvas=new OffscreenCanvas(256,256);const s=this.canvas.getContext("2d");if(null===s)throw new Error("Error getting 2D rendering context from canvas. This browser does not support FaviconMarquee");this.canvasDrawer=new e(t,s),this.state=n.Stopped}start(){if(this.state==n.Running)return;this.state=n.Running;const t=async()=>{if(1===this.state){this.canvasDrawer.step();const e=await this.getDataUrl();this.handleDataUrl(e),requestAnimationFrame(t)}};t().catch((t=>console.log("Failed to render FaviconMarquee:",t)))}stop(){this.state=n.Stopped}async getDataUrl(){const t=await this.canvas.convertToBlob({type:"image/png"}),e=new Promise((e=>{const s=new FileReader;s.addEventListener("loadend",(()=>{if(s.readyState!==FileReader.DONE||"string"!=typeof s.result)throw new Error("Error converting OffscreenCanvas to data URL");e(s.result)})),s.readAsDataURL(t)}));return await e}handleDataUrl(t){const e={type:"data",payload:{url:t}};self.postMessage(e)}}let a;self.onmessage=t=>{const e=t.data.type;switch(e){case"start":const{parameters:s}=t.data.payload;a||(a=new r(s)),a.start();break;case"stop":a&&a.stop();break;default:throw new Error(`Error: Worker should not receive any messages except "start" and "stop"; got ${e}`)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,